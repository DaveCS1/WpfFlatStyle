<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlatStyle</name>
    </assembly>
    <members>
        <member name="T:FlatStyle.BaseAttachedProperty`2">
            <summary>
            A base attached property to replace the vanilla WPF attached property
            </summary>
            <typeparam name="Parent">The parent class to be the attached property</typeparam>
            <typeparam name="Property">The type of this attached property</typeparam>
        </member>
        <member name="E:FlatStyle.BaseAttachedProperty`2.ValueChanged">
            <summary>
            Fired when the value changes
            </summary>
        </member>
        <member name="E:FlatStyle.BaseAttachedProperty`2.ValueUpdated">
            <summary>
            Fired when the value changes, even when the value is the same
            </summary>
        </member>
        <member name="P:FlatStyle.BaseAttachedProperty`2.Instance">
            <summary>
            A singleton instance of our parent class
            </summary>
        </member>
        <member name="F:FlatStyle.BaseAttachedProperty`2.ValueProperty">
            <summary>
            The attached property for this class
            </summary>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.GetValue(System.Windows.DependencyObject)">
            <summary>
            Gets the attached property
            </summary>
            <param name="d">The element to get the property from</param>
            <returns></returns>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.SetValue(System.Windows.DependencyObject,`1)">
            <summary>
            Sets the attached property
            </summary>
            <param name="d">The element to get the property from</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The callback event when the <see cref="F:FlatStyle.BaseAttachedProperty`2.ValueProperty"/> is changed
            </summary>
            <param name="d">The UI element that had it's property changed</param>
            <param name="e">The arguments for the event</param>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.OnValuePropertyUpdated(System.Windows.DependencyObject,System.Object)">
            <summary>
            The callback event when the <see cref="F:FlatStyle.BaseAttachedProperty`2.ValueProperty"/> is changed, even if it is the
            same value
            </summary>
            <param name="d">The UI element that had it's property changed</param>
            <param name="e">The arguments for the event</param>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The method that is called when any attached property of this type is changed
            </summary>
            <param name="sender">The UI element that this property was changed for</param>
            <param name="e">The arguments for this event</param>
        </member>
        <member name="M:FlatStyle.BaseAttachedProperty`2.OnValueUpdated(System.Windows.DependencyObject,System.Object)">
            <summary>
            The method that is called when any attached property of this type is changed, even if
            the value is the same
            </summary>
            <param name="sender">The UI element that this property was changed for</param>
            <param name="e">The arguments for this event</param>
        </member>
        <member name="T:FlatStyle.GetCommand">
            <summary>
            Get command will be invoked whenever Get button is pressed from GetSetField Textbox
            </summary>
        </member>
        <member name="T:FlatStyle.SetCommand">
            <summary>
            Set command will be invoked whenever Set button is pressed from GetSetField Textbox
            </summary>
        </member>
        <member name="T:FlatStyle.LogUnhandledExceptions">
            <summary>
            Logs unhandled exceptions if true in <see cref="F:FlatStyle.LogUnhandledExceptions.fileName"/>
            </summary>
        </member>
        <member name="M:FlatStyle.LogUnhandledExceptions.Log(System.String)">
            <summary>
            Logs message in <see cref="F:FlatStyle.LogUnhandledExceptions.fileName"/> file
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:FlatStyle.LogUnhandledExceptions.Log(System.Exception)">
            <summary>
            Logs message in <see cref="F:FlatStyle.LogUnhandledExceptions.fileName"/> file
            </summary>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:FlatStyle.LogUnhandledExceptions.OnValueUpdated(System.Windows.DependencyObject,System.Object)">
            <summary>
            Hook all unhandled exceptions to the log method
            </summary>
            <param name="sender">Sender</param>
            <param name="value">bool</param>
        </member>
        <member name="F:FlatStyle.ColorFlat.PrimaryColor">
            <summary>
            This is the primary color of Flat UI Buttons, Headers
            </summary>
        </member>
        <member name="F:FlatStyle.ColorFlat.PrimaryLightColor">
            <summary>
            This is the primary color of Flat UI with light shade of primary color
            </summary>
        </member>
        <member name="T:FlatStyle.Command">
            <summary>
            All custom routed commands
            </summary>
        </member>
        <member name="F:FlatStyle.Command.UpdateNumericUpDownValue">
            <summary>
            It updates the numeric updown value
            </summary>
        </member>
        <member name="F:FlatStyle.Command.Close">
            <summary>
            close command for window
            </summary>
        </member>
        <member name="F:FlatStyle.Command.AlwaysOnTop">
            <summary>
            Always on top command for window
            </summary>
        </member>
        <member name="F:FlatStyle.Command.Maximize">
            <summary>
            maximize command for window
            </summary>
        </member>
        <member name="F:FlatStyle.Command.Minimize">
            <summary>
            Minimize command for window
            </summary>
        </member>
        <member name="F:FlatStyle.Command.Theme">
            <summary>
            Theme Setter for Flat window
            </summary>
        </member>
        <member name="F:FlatStyle.DelegateCommand.mAction">
            <summary>
            The action to run
            </summary>
        </member>
        <member name="E:FlatStyle.DelegateCommand.CanExecuteChanged">
            <summary>
            The event thats fired when the <see cref="M:FlatStyle.DelegateCommand.CanExecute(System.Object)"/> value has changed
            </summary>
        </member>
        <member name="M:FlatStyle.DelegateCommand.#ctor(System.Action)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:FlatStyle.DelegateCommand.CanExecute(System.Object)">
            <summary>
            A relay command can always execute
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:FlatStyle.DelegateCommand.Execute(System.Object)">
            <summary>
            Executes the commands Action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="F:FlatStyle.ParameterizedDelegateCommand.mAction">
            <summary>
            The action to run
            </summary>
        </member>
        <member name="E:FlatStyle.ParameterizedDelegateCommand.CanExecuteChanged">
            <summary>
            The event thats fired when the <see cref="M:FlatStyle.ParameterizedDelegateCommand.CanExecute(System.Object)"/> value has changed
            </summary>
        </member>
        <member name="M:FlatStyle.ParameterizedDelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:FlatStyle.ParameterizedDelegateCommand.CanExecute(System.Object)">
            <summary>
            A relay command can always execute
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:FlatStyle.ParameterizedDelegateCommand.Execute(System.Object)">
            <summary>
            Executes the commands Action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:FlatStyle.Controls.ColorPicker">
             <summary>
             Holds a ColorPicker control, and exposes the ColorPicker SelectedColor.
            
             Enhanced by Mark Treadwell (1/2/10) to include:
             - Added ability to set ColorPicker initial color via constructor or property
             - Use of Button's IsDefault and IsCancel properties
             - Setting tab behavior
             </summary>
            <summary>
            ColorPicker
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPicker.#ctor">
            <summary>
            Default constructor initializes to Black.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPicker.#ctor(System.Windows.Media.Color)">
            <summary>
            Constructor with an initial color.
            </summary>
            <param name="initialColor">Color to set the ColorPicker to.</param>
        </member>
        <member name="P:FlatStyle.Controls.ColorPicker.SelectedColor">
            <summary>
            Gets/sets the ColorDialog color.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPicker.btnOK_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Close ColorDialog, accepting color selection.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPicker.btnCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Close ColorDialog, rejecting color selection.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlatStyle.Controls.ColorPickerControl">
             <summary>
             A simple WPF color picker. The basic idea is to use a Color swatch image and then pick out a
             single pixel and use that pixel's RGB values along with the Alpha slider to form a SelectedColor.
            
             This class is from Sacha Barber at http://sachabarber.net/?p=424 and http://www.codeproject.com/KB/WPF/WPFColorPicker.aspx.
            
             This class borrows an idea or two from the following sources:
             - AlphaSlider and Preview box; Based on an article by ShawnVN's Blog; http://weblogs.asp.net/savanness/archive/2006/12/05/colorcomb-yet-another-color-picker-dialog-for-wpf.aspx.
             - 1*1 pixel copy; Based on an article by Lee Brimelow; http://thewpfblog.com/?p=62.
            
             Enhanced by Mark Treadwell (1/2/10):
             - Left click to select the color with no mouse move
             - Set tab behavior
             - Set an initial color (note that the search to set the cursor ellipse delays the initial display)
             - Fix single digit hex displays
             - Add Mouse Wheel support to change the Alpha value
             - Modify color select dragging behavior
             </summary>
            <summary>
            ColorPickerControl
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.#ctor">
            <summary>
            Default constructor that initializes the ColorPicker to Black.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.#ctor(System.Windows.Media.Color)">
            <summary>
            Constructor that initializes to ColorPicker to the specified color.
            </summary>
            <param name="initialColor"></param>
        </member>
        <member name="P:FlatStyle.Controls.ColorPickerControl.SelectedColor">
            <summary>
            Gets or privately sets the Selected Color.
            </summary>
        </member>
        <member name="P:FlatStyle.Controls.ColorPickerControl.InitialColor">
            <summary>
            Sets the initial Selected Color.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.AlphaSlider_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.AlphaSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Update SelectedColor Alpha based on Slider value.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.CanvasImage_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Update the SelectedColor if moving the mouse with the left button down.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.CanvasImage_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle MouseDown event.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.CanvasImage_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle MouseUp event.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.Swatch_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Apply the new Swatch image based on user requested swatch.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.CreateAlphaLinearBrush">
            <summary>
            Creates a new LinearGradientBrush background for the Alpha area slider. This is based on
            the current color.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.UpdateColor">
            <summary>
            Sets a new Selected Color based on the color of the pixel under the mouse pointer.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.UpdateCursorEllipse(System.Windows.Media.Color)">
            <summary>
            Update the mouse cursor ellipse position.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.UpdateTextBoxes">
            <summary>
            Update text box values based on the Selected Color.
            </summary>
        </member>
        <member name="M:FlatStyle.Controls.ColorPickerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlatStyle.ThemeSelector">
            <summary>
            Interaction logic for ThemeSelector.xaml
            </summary>
            <summary>
            ThemeSelector
            </summary>
        </member>
        <member name="M:FlatStyle.ThemeSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:FlatStyle.Converters.BaseValueConverter`1.Converter">
            <summary>
            A single static instance of this value converter
            </summary>
        </member>
        <member name="M:FlatStyle.Converters.BaseValueConverter`1.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides a static instance of the value converter
            </summary>
            <param name="serviceProvider">The service provider</param>
            <returns></returns>
        </member>
        <member name="M:FlatStyle.Converters.BaseValueConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The method to convert one type to another
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:FlatStyle.Converters.BaseValueConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The method to convert a value back to it's source type
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:FlatStyle.Converters.BooleanToVisiblityConverter">
            <summary>
            Converts bool to Visibility parameters: | NC = normal collapsed | IC = Inverted Collapsed |
            NH = Normal Hidden | IH = Inverted Hidden
            </summary>
        </member>
        <member name="T:FlatStyle.TileSoftDown">
            <summary>
            Interaction logic for TileSoftDown.xaml
            </summary>
            <summary>
            TileSoftDown
            </summary>
        </member>
        <member name="M:FlatStyle.TileSoftDown.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlatStyle.TileSoftUp">
            <summary>
            Interaction logic for TileSoft.xaml
            </summary>
            <summary>
            TileSoftUp
            </summary>
        </member>
        <member name="M:FlatStyle.TileSoftUp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlatStyle.TilePanel">
            <summary>
            Interaction logic for TileStackPanel.xaml
            </summary>
            <summary>
            TilePanel
            </summary>
        </member>
        <member name="F:FlatStyle.TilePanel.BackgroundColorProperty">
            <summary>
            Tile Background Color property
            </summary>
        </member>
        <member name="F:FlatStyle.TilePanel.ColorProperty">
            <summary>
            Title color property
            </summary>
        </member>
        <member name="F:FlatStyle.TilePanel.TitleProperty">
            <summary>
            This will be the Title of tile
            </summary>
        </member>
        <member name="M:FlatStyle.TilePanel.#ctor">
            <summary>
            Tile stack panel is just a normal stack panel with shadow and Title
            </summary>
        </member>
        <member name="P:FlatStyle.TilePanel.Title">
            <summary>
            This will be title of tile
            </summary>
        </member>
        <member name="P:FlatStyle.TilePanel.BackgroundColor">
            <summary>
            Tile Background Color
            </summary>
        </member>
        <member name="P:FlatStyle.TilePanel.HeaderColor">
            <summary>
            Title Header Color
            </summary>
        </member>
        <member name="M:FlatStyle.TilePanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
